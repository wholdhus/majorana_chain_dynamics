using ITensors, ITensorMPS
let
    # Create 100 spin-one indices
    N = 100
    sites = siteinds("S=1/2", N)
    t0 = 1
    t = 0
    g = 1
    w = 1

    # Input operator terms which define
    # a Hamiltonian matrix, and convert
    # these terms to an MPO tensor network
    os = OpSum()
    for j in 1:(N - 2)
        # H1 from OBrien and Fendley
        os += t0*cos(w*t), "Sz", j, "Sz", j + 1
        os += t0*cos(w*t), "Sx", j
        # # H2 from OBrien and Fendley
        os -= g, "Sx", j, "Sz", j + 1, "Sz", j + 2
        os -= g, "Sz", j, "Sz", j + 1, "Sx", j + 2
    end
    H = MPO(os, sites)

    # Create an initial random matrix product state
    psi0 = random_mps(sites)

    # Plan to do 5 passes or 'sweeps' of DMRG,
    # setting maximum MPS internal dimensions
    # for each sweep and maximum truncation cutoff
    # used when adapting internal dimensions:
    nsweeps = 5
    maxdim = [10, 20, 100, 100, 200]
    cutoff = 1.0e-10

    # Run the DMRG algorithm, returning energy
    # (dominant eigenvalue) and optimized MPS
    energy, psi = dmrg(H, psi0; nsweeps, maxdim, cutoff)
    println("Final energy = $energy")

    nothing
end

# output

# After sweep 1 energy=-137.954199761732 maxlinkdim=9 maxerr=2.43E-16 time=9.356
# After sweep 2 energy=-138.935058943878 maxlinkdim=20 maxerr=4.97E-06 time=0.671
# After sweep 3 energy=-138.940080155429 maxlinkdim=92 maxerr=1.00E-10 time=4.522
# After sweep 4 energy=-138.940086009318 maxlinkdim=100 maxerr=1.05E-10 time=11.644
# After sweep 5 energy=-138.940086058840 maxlinkdim=96 maxerr=1.00E-10 time=12.771
# Final energy = -138.94008605883985